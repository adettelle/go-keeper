// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adettelle/go-keeper/internal/server/api (interfaces: IPwdRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repo "github.com/adettelle/go-keeper/internal/repo"
	gomock "github.com/golang/mock/gomock"
)

// MockIPwdRepo is a mock of IPwdRepo interface.
type MockIPwdRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPwdRepoMockRecorder
}

// MockIPwdRepoMockRecorder is the mock recorder for MockIPwdRepo.
type MockIPwdRepoMockRecorder struct {
	mock *MockIPwdRepo
}

// NewMockIPwdRepo creates a new mock instance.
func NewMockIPwdRepo(ctrl *gomock.Controller) *MockIPwdRepo {
	mock := &MockIPwdRepo{ctrl: ctrl}
	mock.recorder = &MockIPwdRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPwdRepo) EXPECT() *MockIPwdRepoMockRecorder {
	return m.recorder
}

// CreatePassword mocks base method.
func (m *MockIPwdRepo) CreatePassword(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePassword", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePassword indicates an expected call of CreatePassword.
func (mr *MockIPwdRepoMockRecorder) CreatePassword(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePassword", reflect.TypeOf((*MockIPwdRepo)(nil).CreatePassword), arg0, arg1, arg2, arg3, arg4)
}

// DeletePassword mocks base method.
func (m *MockIPwdRepo) DeletePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePassword indicates an expected call of DeletePassword.
func (mr *MockIPwdRepoMockRecorder) DeletePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassword", reflect.TypeOf((*MockIPwdRepo)(nil).DeletePassword), arg0, arg1, arg2)
}

// GetAllPasswords mocks base method.
func (m *MockIPwdRepo) GetAllPasswords(arg0 context.Context, arg1 string) ([]repo.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPasswords", arg0, arg1)
	ret0, _ := ret[0].([]repo.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPasswords indicates an expected call of GetAllPasswords.
func (mr *MockIPwdRepoMockRecorder) GetAllPasswords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPasswords", reflect.TypeOf((*MockIPwdRepo)(nil).GetAllPasswords), arg0, arg1)
}

// GetPasswordByTitle mocks base method.
func (m *MockIPwdRepo) GetPasswordByTitle(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordByTitle", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordByTitle indicates an expected call of GetPasswordByTitle.
func (mr *MockIPwdRepoMockRecorder) GetPasswordByTitle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordByTitle", reflect.TypeOf((*MockIPwdRepo)(nil).GetPasswordByTitle), arg0, arg1, arg2)
}

// UpdatePassword mocks base method.
func (m *MockIPwdRepo) UpdatePassword(arg0 context.Context, arg1 string, arg2, arg3 *string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIPwdRepoMockRecorder) UpdatePassword(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIPwdRepo)(nil).UpdatePassword), arg0, arg1, arg2, arg3, arg4)
}
